//
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
//
'use strict';
import ng = angular;
import ngr = angular.ui;
import serviceModule = require('serviceHandler');

export class ClientController {
    socket: any;
    io: any;

    location: ng.ILocationService;
    message: string;
    serviceFactory: serviceModule.ServiceHandler;
    user: any = {};
    state: ngr.IStateService;
    dataReady: boolean = true;
    loggedIn: boolean = false;
    searchString: string;
    slide: string = 'view';

    constructor($rootScope: ng.IScope, $scope: ng.IScope, $state: ngr.IStateService,
        $location: ng.ILocationService, services: any, serviceHandler: serviceModule.ServiceHandler, io: any) {
        console.log('Inside ClientController constructor');

        this.io = io;
        this.serviceFactory = serviceHandler;
        this.serviceFactory.assign(services);
        this.location = $location;
        this.state = $state;
        this.message = '';
        this.getUser();

        $rootScope.$on('$stateChangeStart', this.stateChangeAction);
    }

    stateChangeAction = (event, toState, toParams, fromState, fromParams) => {
        console.warn(JSON.stringify(fromState) + ' , ' + JSON.stringify(toState));
        if (fromState && toState) {
            if (fromState.controller === 'AnalysisController' &&
                toState.controller === 'AnalysisResultsController') {
                this.slide = 'view page-left';
            } else if (fromState.controller === 'AnalysisResultsController' &&
                toState.controller === 'AnalysisController') {
                this.slide = 'view page-right';
            } else {
                this.slide = 'view';
            }
        }
    }

    search = () => {
        //this.state.go('analyze');
        this.message = this.searchString;
    }

    getUser = () => {
        var initializeSocket = (cc: ClientController, token: any) => {
            var address = location.protocol + '//' + location.host;
            //Set the socket.io's resource property to allow for hosting socket.io applications at 
            //subordinate URL paths, which is the default when hosting node.js applications in 
            //IIS virtual directories. For example, if this page had been generated by navigating to 
            //  http://localhost/dante/server-socketio.js
            //then the socket.io's resource propety below will be set to
            //  sdlserver/socket.io
            //instead of the default
            //  socket.io
            //Note the corresponding change in the server-socketio.js node.js backend.

            var details = {
                resource: (window.location.pathname.split('/').slice(0, -1).join('/') + '/sdlserver/socket.io').substring(1),
                transports: ['websocket'],  //[websocket,flashsocket,htmlfile,xhr-polling,jsonp-polling]
                upgrade: false,
                query: 'x-auth-token=' + token
            };

            var client = cc.io.connect(address, details);
            cc.socket = client;
        };

        console.log('Inside getUser');
        var self = this;
        self.dataReady = false;
        this.serviceFactory.getUser().then(function (response) {
            if (response.status === 200) {
                var userData: any = response.data;
                if (userData) {
                    self.user = userData.user;
                    self.serviceFactory.setToken(userData.token);
                    self.loggedIn = true;
                    initializeSocket(self, userData.token);
                }
            }
        }).catch((reason) => {
            self.message = reason.data.Message + ';' + reason.data.ExceptionMessage;
        }).finally(() => {
            self.dataReady = true;
        });
    }


}